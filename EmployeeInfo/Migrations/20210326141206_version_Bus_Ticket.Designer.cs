// <auto-generated />
using System;
using EmployeeInfo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmployeeInfo.Migrations
{
    [DbContext(typeof(SBLDbContext))]
    [Migration("20210326141206_version_Bus_Ticket")]
    partial class version_Bus_Ticket
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeeInfo.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EmployeeInfo.Data.Entity.AssignmentMarch", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FristName");

                    b.Property<string>("LesttName");

                    b.Property<string>("Massage");

                    b.Property<string>("Subject");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("id");

                    b.ToTable("AssignmentMarchs");
                });

            modelBuilder.Entity("EmployeeInfo.Data.Entity.BusTicket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("amount");

                    b.Property<string>("comment");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<string>("form");

                    b.Property<string>("paddress");

                    b.Property<string>("pname");

                    b.Property<string>("sitno");

                    b.Property<string>("to");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.HasKey("id");

                    b.ToTable("BusTickets");
                });

            modelBuilder.Entity("EmployeeInfo.Data.Entity.CustomerRequsition", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActiveChequeBook");

                    b.Property<string>("AmountBDT_USD");

                    b.Property<int?>("AutoDebitInstruction");

                    b.Property<string>("BDT");

                    b.Property<string>("BranchName");

                    b.Property<string>("ChangeEmail");

                    b.Property<int?>("EnhanceLimitCreditCard");

                    b.Property<string>("FormMonthe");

                    b.Property<string>("Inword");

                    b.Property<int?>("IssueANewPIN");

                    b.Property<int?>("LimitConversation");

                    b.Property<int?>("LosUpdateDocument");

                    b.Property<int?>("LostChequeBookFor");

                    b.Property<DateTime?>("LostChequeBookForm");

                    b.Property<DateTime?>("LostChequeBookTo");

                    b.Property<string>("NewSignature");

                    b.Property<string>("Nid");

                    b.Property<string>("OldSignature");

                    b.Property<string>("Password");

                    b.Property<string>("Reason");

                    b.Property<string>("ToMonth");

                    b.Property<int?>("Waive");

                    b.Property<string>("accountNo");

                    b.Property<int?>("addressType");

                    b.Property<int?>("certificate");

                    b.Property<string>("closeCreditCardReason");

                    b.Property<int?>("creaditCard");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy");

                    b.Property<DateTime?>("date");

                    b.Property<string>("designation");

                    b.Property<string>("district");

                    b.Property<string>("etin");

                    b.Property<string>("flat");

                    b.Property<string>("floor");

                    b.Property<string>("formBDT");

                    b.Property<string>("formUSD");

                    b.Property<string>("house");

                    b.Property<string>("houseName");

                    b.Property<DateTime>("leafForm");

                    b.Property<DateTime>("leafTo");

                    b.Property<int?>("lostCard");

                    b.Property<string>("mobile");

                    b.Property<string>("mobileHome");

                    b.Property<string>("mobileOffice");

                    b.Property<string>("others");

                    b.Property<int?>("requsetFor");

                    b.Property<string>("road");

                    b.Property<int?>("service");

                    b.Property<int?>("signature");

                    b.Property<string>("thana");

                    b.Property<string>("toBDT");

                    b.Property<string>("toUSD");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy");

                    b.Property<string>("village");

                    b.HasKey("id");

                    b.ToTable("CustomerRequsitions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EmployeeInfo.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EmployeeInfo.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeeInfo.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EmployeeInfo.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
